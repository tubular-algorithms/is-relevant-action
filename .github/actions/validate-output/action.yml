name: Validates output from is-relevant tests
inputs:
  relevant-expected:
    description: "Expected yes/no string"
    type: string
    required: true
  relevant-actual:
    description: "Actual yes/no string"
    type: string
    required: true
  relevant-files-expected:
    description: "Expected comma separated list of filenames"
    type: string
    required: true
  relevant-files-actual:
    description: "Actual comma separated list of filenames"
    type: string
    required: true
runs:
  using: "composite"
  steps:
    - name: Validate relevant output
      shell: "bash"
      run: |
        actual="${{ inputs.relevant-actual }}"
        expected="${{ inputs.relevant-expected }}"
        if [ $actual != $expected ]
        then
          echo "::error::Not expected result, expected '${expected}', actual '${actual}'"
          exit 1
        fi
    - name: Validate relevant-files output
      shell: "bash"
      run: |
        json_actual_str=$(echo '${{ inputs.relevant-files-actual }}')
        json_expected_str=$(echo '${{ inputs.relevant-files-actual }}')
        is_array=$(echo '$json_actual_str' | jq --raw-output 'if type=="array" then "yes" else "no" end')

        echo "result is array? $is_array"

        if [ "$is_array" = "no" ]
        then
          actual_sorted=$(echo '$json_actual_str' | jq 'split(",") | sort_by(.) | join(",")')
          expected_sorted=$(echo '$json_expected_str' | jq 'split(",") | sort_by(.) | join(",")')

          if [ $actual_sorted != $expected_sorted ]
          then
            echo "::error::Not expected result, expected: ${expected_sorted}, actual ${actual_sorted}"
            exit 1
          fi
        else
          echo "we have an array"

          echo '$json_actual_str' | jq -c '.[]' | while read i; do
            echo '$i'
          done
        fi
