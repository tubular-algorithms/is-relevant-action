name: Validates output from is-relevant tests
inputs:
  relevant-expected:
    description: "Expected yes/no string"
    type: string
    required: true
  relevant-actual:
    description: "Actual yes/no string"
    type: string
    required: true
  relevant-files-expected:
    description: "Expected comma separated list of filenames"
    type: string
    required: true
  relevant-files-actual:
    description: "Actual comma separated list of filenames"
    type: string
    required: true
runs:
  using: "composite"
  steps:
    - name: Validate relevant output
      shell: "bash"
      run: |
        json_actual_str='${{ inputs.relevant-actual }}'
        json_expected_str='${{ inputs.relevant-expected }}'

        is_object=$(echo "$json_expected_str" | jq --raw-output 'if type=="object" then "yes" else "no" end')

        echo "Expected an object? $is_object"

        if [ "$is_object" = "no" ]
        then
          if [ $json_actual_str != $json_expected_str ]
          then
            echo "::error::Not expected result, expected '${expected}', actual '${actual}'"
            exit 1
          fi
        else
          readarray -t actual_key_arr < <(echo "$json_actual_str" | jq -c '. | keys[]')
          readarray -t expected_key_arr < <(echo "$json_expected_str" | jq -c '. | keys[]')
          readarray -t actual_value_arr < <(echo "$json_actual_str" | jq -c '. | values[]')
          readarray -t expected_value_arr < <(echo "$json_expected_str" | jq -c '. | values[]')

          if [ "${#actual_key_arr[@]}" -ne "${#expected_key_arr[@]}" ]; then
            echo "::error::Expected ${#expected_key_arr[@]} items in keys array but found ${#actual_key_arr[@]}"
            exit 1
          fi

          for i in "${!expected_key_arr[@]}"; do
            printf "expected: %s, actual: %s\n" "${expected_key_arr[i]}" "${actual_key_arr[i]}"

            if [ "${actual_key_arr[i]}" != "${expected_key_arr[i]}" ]
            then
              echo "::error::Not expected result, expected '${expected_key_arr[i]}', actual '${actual_key_arr[i]}'"
              exit 1
            fi

            echo "✓"
          done

          for i in "${!expected_value_arr[@]}"; do
            printf "expected: %s, actual: %s\n" "${expected_value_arr[i]}" "${actual_value_arr[i]}"

            if [ "${actual_value_arr[i]}" != "${expected_value_arr[i]}" ]
            then
              echo "::error::Not expected result, expected '${expected_value_arr[i]}', actual '${actual_value_arr[i]}'"
              exit 1
            fi

            echo "✓"
          done
        fi
    - name: Validate relevant-files output
      shell: "bash"
      run: |
        validate_file_list () {
          actual=$1
          expected=$2

          actual_sorted=$(echo "$actual" | jq 'split(",") | sort_by(.) | join(",")')
          expected_sorted=$(echo "$expected" | jq 'split(",") | sort_by(.) | join(",")')

          if [ $actual_sorted != $expected_sorted ]
          then
            echo "::error::Not expected result, expected: ${expected_sorted}, actual ${actual_sorted}"
            exit 1
          else
            echo "actual sorted: $actual_sorted"
            echo "EQUALS"
            echo "expected sorted: $expected_sorted"
          fi
        }

        json_actual_str=$(echo '${{ inputs.relevant-files-actual }}')
        json_expected_str=$(echo '${{ inputs.relevant-files-expected }}')
        is_array=$(echo "$json_expected_str" | jq --raw-output 'if type=="array" then "yes" else "no" end')

        echo "Expected an array? $is_array"

        if [ "$is_array" = "no" ]
        then
          validate_file_list $json_actual_str $json_expected_str
        else
          echo "Checking arrays are comparable..."

          readarray -t actual_arr < <(echo "$json_actual_str" | jq -c '.[]')
          readarray -t expected_arr < <(echo "$json_expected_str" | jq -c '.[]')

          if [ "${#actual_arr[@]}" -ne "${#expected_arr[@]}" ]; then
            echo "::error::Expected ${#expected_arr[@]} items in array but found ${#actual_arr[@]}"
            exit 1
          fi

          for i in "${!expected_arr[@]}"; do
            printf "expected: %s, actual: %s\n" "${expected_arr[i]}" "${actual_arr[i]}"
            validate_file_list "${expected_arr[i]}" "${actual_arr[i]}"
            echo "✓"
          done
        fi
