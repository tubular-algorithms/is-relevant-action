name: Is the list of filenames relevant?
description: A GitHub action that takes a list of files and decides if they are relevant
inputs:
  filenames:
    description: "A comma separated list of filenames"
    type: string
    required: true
  includes:
    description: "A multi-line list of globs that are relevant"
    type: string
    required: false
    default: ""
  excludes:
    description: "A multi-line list of globs that are to be ignored as they are not relevant"
    type: string
    required: false
    default: ""
  config:
    description: "A JSON config string which defines multiple relevance tests"
    type: string
    required: false
    default: ""
outputs:
  relevant:
    description: "yes/no string indicating whether step is relevant or not"
    value: ${{ steps.relevant.outputs.result }}
  relevant-files:
    description: "comma separated list of relevant files"
    value: ${{ steps.relevant.outputs.relevant-files }}
runs:
  using: "composite"
  steps:
    - name: Filter filenames by includes and excludes
      id: relevant
      shell: python
      run: |
        import os
        import fnmatch
        import re
        import json

        from pathlib import PurePath

        filenamesInput = "${{ inputs.filenames }}" or "${{ github.event.inputs.filenames }}"
        includesInput = '''${{ inputs.includes }}''' or '''${{ github.event.inputs.includes }}'''
        excludesInput = '''${{ inputs.excludes }}''' or '''${{ github.event.inputs.excludes }}'''
        configInput = '''${{ inputs.config }}''' or '''${{ github.event.inputs.config }}'''

        def isRelevant(filenamesStr, includesStr, excludesStr):
          filenamesArr = ([], filenamesStr.split(","))[len(filenamesStr) > 0]
          includesArr = ([], includesStr.splitlines())[len(includesStr) > 0]
          excludesArr = ([], excludesStr.splitlines())[len(excludesStr) > 0]

          includesCleanArr = map(str.strip, includesArr)
          excludesCleanArr = map(str.strip, excludesArr)

          includesList = list(includesCleanArr)
          excludesList = list(excludesCleanArr)

          def includesFilter(filename):
            if len(includesRegexList) == 0:
              return True;

            for includeGlob in includesList:
              if PurePath(filename).match(includeGlob):
                return True

            return False

          def excludesFilter(filename):
            for excludeGlob in excludesList:
              if PurePath(filename).match(excludeGlob):
                return False

            return True

          # Throw away filenames that don't match one of the include patterns
          filenamesArr = list(filter(includesFilter, filenamesArr))

          # Throw away filenames that match any exclude pattern
          filenamesArr = filter(excludesFilter, filenamesArr)

          resultsList = list(filenamesArr)

          print('filenamesInput: ' + filenamesInput)
          print('includesList: ' + ",".join(includesList))
          print('excludesList: ' + ",".join(excludesList))

          result = ('no', 'yes')[len(resultsList) > 0]
          resultListStr = ",".join(resultsList)

          print('Is relevant? ' + result)
          print('Relevant files: ' + resultListStr)

          return result, resultListStr

        result, resultListStr = isRelevant(filenamesInput, includesInput, excludesInput)

        if len(configInput) > 0:
          print('Config detected: ' + configInput)

          configArr = json.loads(configInput)
          resultsList = []

          for configItem in configArr:
            itemName = configItem['name']
            itemIncludes = configItem.get('includes', "")
            itemExcludes = configItem.get('excludes', "")
            print(itemName + ": includes: '" + itemIncludes + "' excludes: '" + itemExcludes + "'")
            result, resultListStr = isRelevant(resultListStr, itemIncludes, itemExcludes)
            print(itemName + ": result: '" + result + "' files: '" + resultListStr + "'")
            resultsList += [result]
          
          resultsListStr = ",".join(resultsList)

          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
            print(f'result={resultsListStr}', file=fh)
        else:
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
            print(f'result={result}', file=fh)

        with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
          print(f'relevant-files={resultListStr}', file=fh)

        file = open(os.environ['GITHUB_OUTPUT'], "r");

        print("GITHUB_OUTPUT:");
        print(file.read());

        file.close();
